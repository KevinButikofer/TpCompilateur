
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftADD_OPleftMUL_OPrightUMINUSADD_OP BOOL COCHON_EGAL_PORC FALSE FERMEZ_VOS_ORDINATEUR IDENTIFIER INT JE_PASSE_MON_ANNEE JE_VAIS_BOSSER_CETTE_SEMAINE MUL_OP NUMBER ONE_POINT ON_SE_LE_REFAIT_UNE_PETITE_FOIS PAS_MAL PAS_TERRIBLE SERIEUX TROEUW TRUE TYPE programme : statement  programme : statement ';' programme  statement : assignation\n        | declaration\n        | structure  statement : PAS_MAL expression  structure : ON_SE_LE_REFAIT_UNE_PETITE_FOIS expression '{' programme '}' expression : expression ADD_OP expression\n            | expression MUL_OP expressionexpression : NUMBER\n        | INT\n        | boolean\n        | IDENTIFIER  boolean : TRUE\n                | FALSEexpression : '(' expression ')'  expression : ADD_OP expression %prec UMINUS declaration : TYPE IDENTIFIER  assignation : IDENTIFIER '=' expression "
    
_lr_action_items = {'PAS_MAL':([0,10,29,],[6,6,6,]),'IDENTIFIER':([0,6,8,9,10,12,17,20,24,25,29,],[7,16,21,16,7,16,16,16,16,16,7,]),'TYPE':([0,10,29,],[8,8,8,]),'ON_SE_LE_REFAIT_UNE_PETITE_FOIS':([0,10,29,],[9,9,9,]),'$end':([1,2,3,4,5,11,13,14,15,16,18,19,21,23,26,28,30,31,32,34,],[0,-1,-3,-4,-5,-6,-10,-11,-12,-13,-14,-15,-18,-2,-17,-19,-8,-9,-16,-7,]),'}':([2,3,4,5,11,13,14,15,16,18,19,21,23,26,28,30,31,32,33,34,],[-1,-3,-4,-5,-6,-10,-11,-12,-13,-14,-15,-18,-2,-17,-19,-8,-9,-16,34,-7,]),';':([2,3,4,5,11,13,14,15,16,18,19,21,26,28,30,31,32,34,],[10,-3,-4,-5,-6,-10,-11,-12,-13,-14,-15,-18,-17,-19,-8,-9,-16,-7,]),'NUMBER':([6,9,12,17,20,24,25,],[13,13,13,13,13,13,13,]),'INT':([6,9,12,17,20,24,25,],[14,14,14,14,14,14,14,]),'(':([6,9,12,17,20,24,25,],[17,17,17,17,17,17,17,]),'ADD_OP':([6,9,11,12,13,14,15,16,17,18,19,20,22,24,25,26,27,28,30,31,32,],[12,12,24,12,-10,-11,-12,-13,12,-14,-15,12,24,12,12,-17,24,24,-8,-9,-16,]),'TRUE':([6,9,12,17,20,24,25,],[18,18,18,18,18,18,18,]),'FALSE':([6,9,12,17,20,24,25,],[19,19,19,19,19,19,19,]),'=':([7,],[20,]),'MUL_OP':([11,13,14,15,16,18,19,22,26,27,28,30,31,32,],[25,-10,-11,-12,-13,-14,-15,25,-17,25,25,25,-9,-16,]),'{':([13,14,15,16,18,19,22,26,30,31,32,],[-10,-11,-12,-13,-14,-15,29,-17,-8,-9,-16,]),')':([13,14,15,16,18,19,26,27,30,31,32,],[-10,-11,-12,-13,-14,-15,-17,32,-8,-9,-16,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programme':([0,10,29,],[1,23,33,]),'statement':([0,10,29,],[2,2,2,]),'assignation':([0,10,29,],[3,3,3,]),'declaration':([0,10,29,],[4,4,4,]),'structure':([0,10,29,],[5,5,5,]),'expression':([6,9,12,17,20,24,25,],[11,22,26,27,28,30,31,]),'boolean':([6,9,12,17,20,24,25,],[15,15,15,15,15,15,15,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> statement','programme',1,'p_programme_statement','parser5.py',9),
  ('programme -> statement ; programme','programme',3,'p_programme_recursive','parser5.py',13),
  ('statement -> assignation','statement',1,'p_statement','parser5.py',17),
  ('statement -> declaration','statement',1,'p_statement','parser5.py',18),
  ('statement -> structure','statement',1,'p_statement','parser5.py',19),
  ('statement -> PAS_MAL expression','statement',2,'p_statement_print','parser5.py',23),
  ('structure -> ON_SE_LE_REFAIT_UNE_PETITE_FOIS expression { programme }','structure',5,'p_structure','parser5.py',27),
  ('expression -> expression ADD_OP expression','expression',3,'p_expression_op','parser5.py',31),
  ('expression -> expression MUL_OP expression','expression',3,'p_expression_op','parser5.py',32),
  ('expression -> NUMBER','expression',1,'p_expression_num_or_var','parser5.py',36),
  ('expression -> INT','expression',1,'p_expression_num_or_var','parser5.py',37),
  ('expression -> boolean','expression',1,'p_expression_num_or_var','parser5.py',38),
  ('expression -> IDENTIFIER','expression',1,'p_expression_num_or_var','parser5.py',39),
  ('boolean -> TRUE','boolean',1,'p_boolean','parser5.py',43),
  ('boolean -> FALSE','boolean',1,'p_boolean','parser5.py',44),
  ('expression -> ( expression )','expression',3,'p_expression_paren','parser5.py',48),
  ('expression -> ADD_OP expression','expression',2,'p_minus','parser5.py',52),
  ('declaration -> TYPE IDENTIFIER','declaration',2,'p_declaration','parser5.py',56),
  ('assignation -> IDENTIFIER = expression','assignation',3,'p_assign','parser5.py',60),
]
