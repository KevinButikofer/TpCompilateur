
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftADD_OPleftMUL_OPrightUMINUSADD_OP BOOL COCHON_EGAL_PORC COMPARISONOP C_EST_EN_FORGEANT_QU_ON_DEVIENT_FORGERON ELSE FALSE FERMEZ_VOS_ORDINATEUR IDENTIFIER INT JE_PASSE_MON_ANNEE JE_VAIS_BOSSER_CETTE_SEMAINE MUL_OP NUMBER ONE_POINT ON_SE_LE_REFAIT_UNE_PETITE_FOIS PAS_MAL PAS_TERRIBLE SERIEUX STRING TROEUW TRUE TYPE programme : statement  programme : statement ';' programme  statement : assignation\n        | declaration\n        | structure  statement : PAS_MAL expression  structure : ON_SE_LE_REFAIT_UNE_PETITE_FOIS condition '{' programme '}' expression : expression ADD_OP expression\n            | expression MUL_OP expressionexpression : NUMBER\n        | INT\n        | boolean\n        | STRING\n        | IDENTIFIER  boolean : TRUE\n                | FALSE expression : '(' expression ')'  expression : ADD_OP expression %prec UMINUS declaration : TYPE IDENTIFIER  assignation : IDENTIFIER '=' expression  condition : '(' expression COMPARISONOP expression ')'  condition : expression COMPARISONOP expression  structure : SERIEUX condition '{' programme '}'  structure : SERIEUX condition '{' programme '}' ELSE '{' programme '}'  structure : C_EST_EN_FORGEANT_QU_ON_DEVIENT_FORGERON '(' assignation ';' condition ';' assignation ')' '{' programme '}' "
    
_lr_action_items = {'PAS_MAL':([0,12,36,39,56,61,],[6,6,6,6,6,6,]),'IDENTIFIER':([0,6,8,9,10,12,14,20,23,26,29,31,32,36,38,39,45,48,55,56,61,],[7,19,24,19,19,7,19,19,19,19,7,19,19,7,19,7,19,19,7,7,7,]),'TYPE':([0,12,36,39,56,61,],[8,8,8,8,8,8,]),'ON_SE_LE_REFAIT_UNE_PETITE_FOIS':([0,12,36,39,56,61,],[9,9,9,9,9,9,]),'SERIEUX':([0,12,36,39,56,61,],[10,10,10,10,10,10,]),'C_EST_EN_FORGEANT_QU_ON_DEVIENT_FORGERON':([0,12,36,39,56,61,],[11,11,11,11,11,11,]),'$end':([1,2,3,4,5,13,15,16,17,18,19,21,22,24,30,33,35,41,42,43,49,51,60,63,],[0,-1,-3,-4,-5,-6,-10,-11,-12,-13,-14,-15,-16,-19,-2,-18,-20,-8,-9,-17,-7,-23,-24,-25,]),'}':([2,3,4,5,13,15,16,17,18,19,21,22,24,30,33,35,41,42,43,44,47,49,51,58,60,62,63,],[-1,-3,-4,-5,-6,-10,-11,-12,-13,-14,-15,-16,-19,-2,-18,-20,-8,-9,-17,49,51,-7,-23,60,-24,63,-25,]),';':([2,3,4,5,13,15,16,17,18,19,21,22,24,33,35,40,41,42,43,46,49,51,52,53,60,63,],[12,-3,-4,-5,-6,-10,-11,-12,-13,-14,-15,-16,-19,-18,-20,48,-8,-9,-17,-22,-7,-23,55,-21,-24,-25,]),'NUMBER':([6,9,10,14,20,23,26,31,32,38,45,48,],[15,15,15,15,15,15,15,15,15,15,15,15,]),'INT':([6,9,10,14,20,23,26,31,32,38,45,48,],[16,16,16,16,16,16,16,16,16,16,16,16,]),'STRING':([6,9,10,14,20,23,26,31,32,38,45,48,],[18,18,18,18,18,18,18,18,18,18,18,18,]),'(':([6,9,10,11,14,20,23,26,31,32,38,45,48,],[20,26,26,29,20,20,20,20,20,20,20,20,26,]),'ADD_OP':([6,9,10,13,14,15,16,17,18,19,20,21,22,23,26,27,31,32,33,34,35,37,38,41,42,43,45,46,48,50,],[14,14,14,31,14,-10,-11,-12,-13,-14,14,-15,-16,14,14,31,14,14,-18,31,31,31,14,-8,-9,-17,14,31,14,31,]),'TRUE':([6,9,10,14,20,23,26,31,32,38,45,48,],[21,21,21,21,21,21,21,21,21,21,21,21,]),'FALSE':([6,9,10,14,20,23,26,31,32,38,45,48,],[22,22,22,22,22,22,22,22,22,22,22,22,]),'=':([7,],[23,]),'MUL_OP':([13,15,16,17,18,19,21,22,27,33,34,35,37,41,42,43,46,50,],[32,-10,-11,-12,-13,-14,-15,-16,32,-18,32,32,32,32,-9,-17,32,32,]),'COMPARISONOP':([15,16,17,18,19,21,22,27,33,37,41,42,43,],[-10,-11,-12,-13,-14,-15,-16,38,-18,45,-8,-9,-17,]),')':([15,16,17,18,19,21,22,33,34,35,37,41,42,43,50,57,],[-10,-11,-12,-13,-14,-15,-16,-18,43,-20,43,-8,-9,-17,53,59,]),'{':([15,16,17,18,19,21,22,25,28,33,41,42,43,46,53,54,59,],[-10,-11,-12,-13,-14,-15,-16,36,39,-18,-8,-9,-17,-22,-21,56,61,]),'ELSE':([51,],[54,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programme':([0,12,36,39,56,61,],[1,30,44,47,58,62,]),'statement':([0,12,36,39,56,61,],[2,2,2,2,2,2,]),'assignation':([0,12,29,36,39,55,56,61,],[3,3,40,3,3,57,3,3,]),'declaration':([0,12,36,39,56,61,],[4,4,4,4,4,4,]),'structure':([0,12,36,39,56,61,],[5,5,5,5,5,5,]),'expression':([6,9,10,14,20,23,26,31,32,38,45,48,],[13,27,27,33,34,35,37,41,42,46,50,27,]),'boolean':([6,9,10,14,20,23,26,31,32,38,45,48,],[17,17,17,17,17,17,17,17,17,17,17,17,]),'condition':([9,10,48,],[25,28,52,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> statement','programme',1,'p_programme_statement','parser5.py',9),
  ('programme -> statement ; programme','programme',3,'p_programme_recursive','parser5.py',13),
  ('statement -> assignation','statement',1,'p_statement','parser5.py',17),
  ('statement -> declaration','statement',1,'p_statement','parser5.py',18),
  ('statement -> structure','statement',1,'p_statement','parser5.py',19),
  ('statement -> PAS_MAL expression','statement',2,'p_statement_print','parser5.py',23),
  ('structure -> ON_SE_LE_REFAIT_UNE_PETITE_FOIS condition { programme }','structure',5,'p_structure','parser5.py',27),
  ('expression -> expression ADD_OP expression','expression',3,'p_expression_op','parser5.py',31),
  ('expression -> expression MUL_OP expression','expression',3,'p_expression_op','parser5.py',32),
  ('expression -> NUMBER','expression',1,'p_expression_num_or_var','parser5.py',36),
  ('expression -> INT','expression',1,'p_expression_num_or_var','parser5.py',37),
  ('expression -> boolean','expression',1,'p_expression_num_or_var','parser5.py',38),
  ('expression -> STRING','expression',1,'p_expression_num_or_var','parser5.py',39),
  ('expression -> IDENTIFIER','expression',1,'p_expression_num_or_var','parser5.py',40),
  ('boolean -> TRUE','boolean',1,'p_boolean','parser5.py',44),
  ('boolean -> FALSE','boolean',1,'p_boolean','parser5.py',45),
  ('expression -> ( expression )','expression',3,'p_expression_paren','parser5.py',49),
  ('expression -> ADD_OP expression','expression',2,'p_minus','parser5.py',53),
  ('declaration -> TYPE IDENTIFIER','declaration',2,'p_declaration','parser5.py',57),
  ('assignation -> IDENTIFIER = expression','assignation',3,'p_assign','parser5.py',61),
  ('condition -> ( expression COMPARISONOP expression )','condition',5,'p_condition_paren','parser5.py',65),
  ('condition -> expression COMPARISONOP expression','condition',3,'p_condition','parser5.py',69),
  ('structure -> SERIEUX condition { programme }','structure',5,'p_if_statement','parser5.py',73),
  ('structure -> SERIEUX condition { programme } ELSE { programme }','structure',9,'p_if_else_statement','parser5.py',77),
  ('structure -> C_EST_EN_FORGEANT_QU_ON_DEVIENT_FORGERON ( assignation ; condition ; assignation ) { programme }','structure',11,'p_for_statement','parser5.py',81),
]
