
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftADD_OPleftMUL_OPrightUMINUSADD_OP BOOL COCHON_EGAL_PORC COMPARISONOP C_EST_EN_FORGEANT_QU_ON_DEVIENT_FORGERON ELSE FALSE FERMEZ_VOS_ORDINATEUR IDENTIFIER INT JE_PASSE_MON_ANNEE JE_VAIS_BOSSER_CETTE_SEMAINE MUL_OP NUMBER ONE_POINT ON_SE_LE_REFAIT_UNE_PETITE_FOIS PAS_MAL PAS_TERRIBLE SERIEUX TROEUW TRUE TYPE programme : statement  programme : statement ';' programme  statement : assignation\n        | declaration\n        | structure  statement : PAS_MAL expression  structure : ON_SE_LE_REFAIT_UNE_PETITE_FOIS condition '{' programme '}' expression : expression ADD_OP expression\n            | expression MUL_OP expressionexpression : NUMBER\n        | INT\n        | boolean\n        | IDENTIFIER  boolean : TRUE\n                | FALSE expression : '(' expression ')'  expression : ADD_OP expression %prec UMINUS declaration : TYPE IDENTIFIER  assignation : IDENTIFIER '=' expression  condition : '(' expression COMPARISONOP expression ')'  condition : expression COMPARISONOP expression  structure : SERIEUX condition '{' programme '}'  structure : SERIEUX condition '{' programme '}' ELSE '{' programme '}'  structure : C_EST_EN_FORGEANT_QU_ON_DEVIENT_FORGERON '(' assignation ';' condition ';' assignation ')' '{' programme '}' "
    
_lr_action_items = {'PAS_MAL':([0,12,35,38,55,60,],[6,6,6,6,6,6,]),'IDENTIFIER':([0,6,8,9,10,12,14,19,22,25,28,30,31,35,37,38,44,47,54,55,60,],[7,18,23,18,18,7,18,18,18,18,7,18,18,7,18,7,18,18,7,7,7,]),'TYPE':([0,12,35,38,55,60,],[8,8,8,8,8,8,]),'ON_SE_LE_REFAIT_UNE_PETITE_FOIS':([0,12,35,38,55,60,],[9,9,9,9,9,9,]),'SERIEUX':([0,12,35,38,55,60,],[10,10,10,10,10,10,]),'C_EST_EN_FORGEANT_QU_ON_DEVIENT_FORGERON':([0,12,35,38,55,60,],[11,11,11,11,11,11,]),'$end':([1,2,3,4,5,13,15,16,17,18,20,21,23,29,32,34,40,41,42,48,50,59,62,],[0,-1,-3,-4,-5,-6,-10,-11,-12,-13,-14,-15,-18,-2,-17,-19,-8,-9,-16,-7,-22,-23,-24,]),'}':([2,3,4,5,13,15,16,17,18,20,21,23,29,32,34,40,41,42,43,46,48,50,57,59,61,62,],[-1,-3,-4,-5,-6,-10,-11,-12,-13,-14,-15,-18,-2,-17,-19,-8,-9,-16,48,50,-7,-22,59,-23,62,-24,]),';':([2,3,4,5,13,15,16,17,18,20,21,23,32,34,39,40,41,42,45,48,50,51,52,59,62,],[12,-3,-4,-5,-6,-10,-11,-12,-13,-14,-15,-18,-17,-19,47,-8,-9,-16,-21,-7,-22,54,-20,-23,-24,]),'NUMBER':([6,9,10,14,19,22,25,30,31,37,44,47,],[15,15,15,15,15,15,15,15,15,15,15,15,]),'INT':([6,9,10,14,19,22,25,30,31,37,44,47,],[16,16,16,16,16,16,16,16,16,16,16,16,]),'(':([6,9,10,11,14,19,22,25,30,31,37,44,47,],[19,25,25,28,19,19,19,19,19,19,19,19,25,]),'ADD_OP':([6,9,10,13,14,15,16,17,18,19,20,21,22,25,26,30,31,32,33,34,36,37,40,41,42,44,45,47,49,],[14,14,14,30,14,-10,-11,-12,-13,14,-14,-15,14,14,30,14,14,-17,30,30,30,14,-8,-9,-16,14,30,14,30,]),'TRUE':([6,9,10,14,19,22,25,30,31,37,44,47,],[20,20,20,20,20,20,20,20,20,20,20,20,]),'FALSE':([6,9,10,14,19,22,25,30,31,37,44,47,],[21,21,21,21,21,21,21,21,21,21,21,21,]),'=':([7,],[22,]),'MUL_OP':([13,15,16,17,18,20,21,26,32,33,34,36,40,41,42,45,49,],[31,-10,-11,-12,-13,-14,-15,31,-17,31,31,31,31,-9,-16,31,31,]),'COMPARISONOP':([15,16,17,18,20,21,26,32,36,40,41,42,],[-10,-11,-12,-13,-14,-15,37,-17,44,-8,-9,-16,]),')':([15,16,17,18,20,21,32,33,34,36,40,41,42,49,56,],[-10,-11,-12,-13,-14,-15,-17,42,-19,42,-8,-9,-16,52,58,]),'{':([15,16,17,18,20,21,24,27,32,40,41,42,45,52,53,58,],[-10,-11,-12,-13,-14,-15,35,38,-17,-8,-9,-16,-21,-20,55,60,]),'ELSE':([50,],[53,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programme':([0,12,35,38,55,60,],[1,29,43,46,57,61,]),'statement':([0,12,35,38,55,60,],[2,2,2,2,2,2,]),'assignation':([0,12,28,35,38,54,55,60,],[3,3,39,3,3,56,3,3,]),'declaration':([0,12,35,38,55,60,],[4,4,4,4,4,4,]),'structure':([0,12,35,38,55,60,],[5,5,5,5,5,5,]),'expression':([6,9,10,14,19,22,25,30,31,37,44,47,],[13,26,26,32,33,34,36,40,41,45,49,26,]),'boolean':([6,9,10,14,19,22,25,30,31,37,44,47,],[17,17,17,17,17,17,17,17,17,17,17,17,]),'condition':([9,10,47,],[24,27,51,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> statement','programme',1,'p_programme_statement','parser5.py',9),
  ('programme -> statement ; programme','programme',3,'p_programme_recursive','parser5.py',13),
  ('statement -> assignation','statement',1,'p_statement','parser5.py',17),
  ('statement -> declaration','statement',1,'p_statement','parser5.py',18),
  ('statement -> structure','statement',1,'p_statement','parser5.py',19),
  ('statement -> PAS_MAL expression','statement',2,'p_statement_print','parser5.py',23),
  ('structure -> ON_SE_LE_REFAIT_UNE_PETITE_FOIS condition { programme }','structure',5,'p_structure','parser5.py',27),
  ('expression -> expression ADD_OP expression','expression',3,'p_expression_op','parser5.py',31),
  ('expression -> expression MUL_OP expression','expression',3,'p_expression_op','parser5.py',32),
  ('expression -> NUMBER','expression',1,'p_expression_num_or_var','parser5.py',36),
  ('expression -> INT','expression',1,'p_expression_num_or_var','parser5.py',37),
  ('expression -> boolean','expression',1,'p_expression_num_or_var','parser5.py',38),
  ('expression -> IDENTIFIER','expression',1,'p_expression_num_or_var','parser5.py',39),
  ('boolean -> TRUE','boolean',1,'p_boolean','parser5.py',43),
  ('boolean -> FALSE','boolean',1,'p_boolean','parser5.py',44),
  ('expression -> ( expression )','expression',3,'p_expression_paren','parser5.py',48),
  ('expression -> ADD_OP expression','expression',2,'p_minus','parser5.py',52),
  ('declaration -> TYPE IDENTIFIER','declaration',2,'p_declaration','parser5.py',56),
  ('assignation -> IDENTIFIER = expression','assignation',3,'p_assign','parser5.py',60),
  ('condition -> ( expression COMPARISONOP expression )','condition',5,'p_condition_paren','parser5.py',64),
  ('condition -> expression COMPARISONOP expression','condition',3,'p_condition','parser5.py',68),
  ('structure -> SERIEUX condition { programme }','structure',5,'p_if_statement','parser5.py',72),
  ('structure -> SERIEUX condition { programme } ELSE { programme }','structure',9,'p_if_else_statement','parser5.py',76),
  ('structure -> C_EST_EN_FORGEANT_QU_ON_DEVIENT_FORGERON ( assignation ; condition ; assignation ) { programme }','structure',11,'p_for_statement','parser5.py',80),
]
