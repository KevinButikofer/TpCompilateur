
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftADD_OPleftMUL_OPrightUMINUSADD_OP COMPARISONOP C_EST_EN_FORGEANT_QU_ON_DEVIENT_FORGERON FALSE IDENTIFIER INCREMENT_OP INT MUL_OP NUMBER ON_SE_LE_REFAIT_UNE_PETITE_FOIS PAS_MAL SCUSE SERIEUX STRING TRUE TYPE programme : statement  programme : statement ';' programme  statement : assignation\n        | declaration\n        | structure  statement : PAS_MAL expression  structure : ON_SE_LE_REFAIT_UNE_PETITE_FOIS condition '{' programme '}' expression : expression ADD_OP expression\n            | expression MUL_OP expressionexpression : NUMBER\n        | INT\n        | boolean\n        | STRING\n        | IDENTIFIER  boolean : TRUE\n                | FALSE expression : '(' expression ')'  expression : ADD_OP expression %prec UMINUS assignation : IDENTIFIER INCREMENT_OP  declaration : TYPE IDENTIFIER  assignation : IDENTIFIER '=' expression  condition : '(' expression COMPARISONOP expression ')'  condition : expression COMPARISONOP expression  structure : SERIEUX condition '{' programme '}'  structure : SERIEUX condition '{' programme '}' SCUSE '{' programme '}'  structure : C_EST_EN_FORGEANT_QU_ON_DEVIENT_FORGERON '(' assignation ';' condition ';' assignation ')' '{' programme '}' "
    
_lr_action_items = {'PAS_MAL':([0,12,37,40,57,62,],[6,6,6,6,6,6,]),'IDENTIFIER':([0,6,8,9,10,12,14,20,24,27,30,32,33,37,39,40,46,49,56,57,62,],[7,19,25,19,19,7,19,19,19,19,7,19,19,7,19,7,19,19,7,7,7,]),'TYPE':([0,12,37,40,57,62,],[8,8,8,8,8,8,]),'ON_SE_LE_REFAIT_UNE_PETITE_FOIS':([0,12,37,40,57,62,],[9,9,9,9,9,9,]),'SERIEUX':([0,12,37,40,57,62,],[10,10,10,10,10,10,]),'C_EST_EN_FORGEANT_QU_ON_DEVIENT_FORGERON':([0,12,37,40,57,62,],[11,11,11,11,11,11,]),'$end':([1,2,3,4,5,13,15,16,17,18,19,21,22,23,25,31,34,36,42,43,44,50,52,61,64,],[0,-1,-3,-4,-5,-6,-10,-11,-12,-13,-14,-15,-16,-19,-20,-2,-18,-21,-8,-9,-17,-7,-24,-25,-26,]),'}':([2,3,4,5,13,15,16,17,18,19,21,22,23,25,31,34,36,42,43,44,45,48,50,52,59,61,63,64,],[-1,-3,-4,-5,-6,-10,-11,-12,-13,-14,-15,-16,-19,-20,-2,-18,-21,-8,-9,-17,50,52,-7,-24,61,-25,64,-26,]),';':([2,3,4,5,13,15,16,17,18,19,21,22,23,25,34,36,41,42,43,44,47,50,52,53,54,61,64,],[12,-3,-4,-5,-6,-10,-11,-12,-13,-14,-15,-16,-19,-20,-18,-21,49,-8,-9,-17,-23,-7,-24,56,-22,-25,-26,]),'NUMBER':([6,9,10,14,20,24,27,32,33,39,46,49,],[15,15,15,15,15,15,15,15,15,15,15,15,]),'INT':([6,9,10,14,20,24,27,32,33,39,46,49,],[16,16,16,16,16,16,16,16,16,16,16,16,]),'STRING':([6,9,10,14,20,24,27,32,33,39,46,49,],[18,18,18,18,18,18,18,18,18,18,18,18,]),'(':([6,9,10,11,14,20,24,27,32,33,39,46,49,],[20,27,27,30,20,20,20,20,20,20,20,20,27,]),'ADD_OP':([6,9,10,13,14,15,16,17,18,19,20,21,22,24,27,28,32,33,34,35,36,38,39,42,43,44,46,47,49,51,],[14,14,14,32,14,-10,-11,-12,-13,-14,14,-15,-16,14,14,32,14,14,-18,32,32,32,14,-8,-9,-17,14,32,14,32,]),'TRUE':([6,9,10,14,20,24,27,32,33,39,46,49,],[21,21,21,21,21,21,21,21,21,21,21,21,]),'FALSE':([6,9,10,14,20,24,27,32,33,39,46,49,],[22,22,22,22,22,22,22,22,22,22,22,22,]),'INCREMENT_OP':([7,],[23,]),'=':([7,],[24,]),'MUL_OP':([13,15,16,17,18,19,21,22,28,34,35,36,38,42,43,44,47,51,],[33,-10,-11,-12,-13,-14,-15,-16,33,-18,33,33,33,33,-9,-17,33,33,]),'COMPARISONOP':([15,16,17,18,19,21,22,28,34,38,42,43,44,],[-10,-11,-12,-13,-14,-15,-16,39,-18,46,-8,-9,-17,]),')':([15,16,17,18,19,21,22,23,34,35,36,38,42,43,44,51,58,],[-10,-11,-12,-13,-14,-15,-16,-19,-18,44,-21,44,-8,-9,-17,54,60,]),'{':([15,16,17,18,19,21,22,26,29,34,42,43,44,47,54,55,60,],[-10,-11,-12,-13,-14,-15,-16,37,40,-18,-8,-9,-17,-23,-22,57,62,]),'SCUSE':([52,],[55,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programme':([0,12,37,40,57,62,],[1,31,45,48,59,63,]),'statement':([0,12,37,40,57,62,],[2,2,2,2,2,2,]),'assignation':([0,12,30,37,40,56,57,62,],[3,3,41,3,3,58,3,3,]),'declaration':([0,12,37,40,57,62,],[4,4,4,4,4,4,]),'structure':([0,12,37,40,57,62,],[5,5,5,5,5,5,]),'expression':([6,9,10,14,20,24,27,32,33,39,46,49,],[13,28,28,34,35,36,38,42,43,47,51,28,]),'boolean':([6,9,10,14,20,24,27,32,33,39,46,49,],[17,17,17,17,17,17,17,17,17,17,17,17,]),'condition':([9,10,49,],[26,29,53,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> statement','programme',1,'p_programme_statement','parser5.py',9),
  ('programme -> statement ; programme','programme',3,'p_programme_recursive','parser5.py',13),
  ('statement -> assignation','statement',1,'p_statement','parser5.py',17),
  ('statement -> declaration','statement',1,'p_statement','parser5.py',18),
  ('statement -> structure','statement',1,'p_statement','parser5.py',19),
  ('statement -> PAS_MAL expression','statement',2,'p_statement_print','parser5.py',23),
  ('structure -> ON_SE_LE_REFAIT_UNE_PETITE_FOIS condition { programme }','structure',5,'p_structure','parser5.py',27),
  ('expression -> expression ADD_OP expression','expression',3,'p_expression_op','parser5.py',31),
  ('expression -> expression MUL_OP expression','expression',3,'p_expression_op','parser5.py',32),
  ('expression -> NUMBER','expression',1,'p_expression_num_or_var','parser5.py',36),
  ('expression -> INT','expression',1,'p_expression_num_or_var','parser5.py',37),
  ('expression -> boolean','expression',1,'p_expression_num_or_var','parser5.py',38),
  ('expression -> STRING','expression',1,'p_expression_num_or_var','parser5.py',39),
  ('expression -> IDENTIFIER','expression',1,'p_expression_num_or_var','parser5.py',40),
  ('boolean -> TRUE','boolean',1,'p_boolean','parser5.py',44),
  ('boolean -> FALSE','boolean',1,'p_boolean','parser5.py',45),
  ('expression -> ( expression )','expression',3,'p_expression_paren','parser5.py',49),
  ('expression -> ADD_OP expression','expression',2,'p_minus','parser5.py',53),
  ('assignation -> IDENTIFIER INCREMENT_OP','assignation',2,'p_increment','parser5.py',57),
  ('declaration -> TYPE IDENTIFIER','declaration',2,'p_declaration','parser5.py',61),
  ('assignation -> IDENTIFIER = expression','assignation',3,'p_assign','parser5.py',65),
  ('condition -> ( expression COMPARISONOP expression )','condition',5,'p_condition_paren','parser5.py',69),
  ('condition -> expression COMPARISONOP expression','condition',3,'p_condition','parser5.py',73),
  ('structure -> SERIEUX condition { programme }','structure',5,'p_if_statement','parser5.py',77),
  ('structure -> SERIEUX condition { programme } SCUSE { programme }','structure',9,'p_if_else_statement','parser5.py',81),
  ('structure -> C_EST_EN_FORGEANT_QU_ON_DEVIENT_FORGERON ( assignation ; condition ; assignation ) { programme }','structure',11,'p_for_statement','parser5.py',85),
]
